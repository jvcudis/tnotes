<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical Notes</title>
    <link>/</link>
    <description>Recent content on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Oct 2019 14:37:09 +1300</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Trigger Github Pages Build</title>
      <link>/github-actions/trigger-gh-pages-build/</link>
      <pubDate>Tue, 08 Oct 2019 14:37:09 +1300</pubDate>
      
      <guid>/github-actions/trigger-gh-pages-build/</guid>
      <description>&lt;p&gt;Recently, I&amp;rsquo;ve been playing with &lt;a href=&#34;https://help.github.com/en/categories/automating-your-workflow-with-github-actions&#34;&gt;Github Actions&lt;/a&gt; and the first thing that I&amp;rsquo;ve thought of doing is how I can use Github Actions aka &lt;strong&gt;Steve&lt;/strong&gt; (let&amp;rsquo;s name it Steve because Github Actions is just too unfriendly! ) to deploy my statically-generated site to Github Pages. The current deployment workflow involves TravisCI handling the generation of static files and deploying them to the &lt;code&gt;gh-pages&lt;/code&gt; branch using a &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/&#34;&gt;built-in configuration&lt;/a&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying Dotnet Core Apps to Heroku</title>
      <link>/heroku/deploying-dotnet-core-apps-to-heroku/</link>
      <pubDate>Wed, 28 Aug 2019 14:59:38 +1200</pubDate>
      
      <guid>/heroku/deploying-dotnet-core-apps-to-heroku/</guid>
      <description>&lt;p&gt;The team I was working with has a test that has been failing for months because said test is looking for a service that does not exist in the test environment it is running on. In local development, the developers have setup mock services for them but they have not setup anything that can be consumed by the app deployed in the test environment. It was a bit disturbing for me seeing a test failing for months without having any idea why it was like that or why it is left in that state.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Alias for zshrc</title>
      <link>/setup/alias-for-zshrc/</link>
      <pubDate>Fri, 05 Apr 2019 13:35:17 +1300</pubDate>
      
      <guid>/setup/alias-for-zshrc/</guid>
      <description>&lt;p&gt;When you get tired of typing &lt;code&gt;git status&lt;/code&gt; and all the other commonly used git commands, then the thought of creating an alias for such commands would have come out of your mind. I&amp;rsquo;m using &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; and below is how I setup my git aliases on my &lt;code&gt;.zshrc&lt;/code&gt; file.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jenkins Declarative Pipelines Gotcha When Using Multi-Staged Dockerfile</title>
      <link>/jenkins/gotcha-on-multi-staged-dockerfile/</link>
      <pubDate>Thu, 31 Jan 2019 12:59:49 +1300</pubDate>
      
      <guid>/jenkins/gotcha-on-multi-staged-dockerfile/</guid>
      <description>&lt;p&gt;When I tried using the Jenkins &lt;strong&gt;Declarative Pipeline&lt;/strong&gt; to build, test and package a .NET Core lambda within a container using a multi-staged dockerfile, it throws an error saying &lt;code&gt;Cannot retrieve .Id from &#39;docker inspect &amp;lt;x&amp;gt; as &amp;lt;y&amp;gt;&#39;&lt;/code&gt;. The strange thing is that it &lt;em&gt;did&lt;/em&gt; build the different stages successfully. I checked by running &lt;code&gt;docker images&lt;/code&gt; to see what images are currently available in the system. I did a bit of research and found out that it is an existing issue of the Jenkins docker plugin &lt;a href=&#34;https://issues.jenkins-ci.org/browse/JENKINS-44609&#34;&gt;issue&lt;/a&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zipping It Properly</title>
      <link>/lambdas/zipping-it-properly/</link>
      <pubDate>Fri, 07 Dec 2018 16:23:44 +1300</pubDate>
      
      <guid>/lambdas/zipping-it-properly/</guid>
      <description>&lt;p&gt;If you have spent at least two hours of figuring out why your NodeJS lambda is throwing an error that says &lt;code&gt;Cannot find module &#39;/var/task/index&lt;/code&gt; then this is for you.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sanitizing JSON Deployment Payload</title>
      <link>/new-relic/sanitizing-json-deployment-payload/</link>
      <pubDate>Wed, 21 Nov 2018 16:55:11 +1300</pubDate>
      
      <guid>/new-relic/sanitizing-json-deployment-payload/</guid>
      <description>&lt;p&gt;A few weeks ago, I was tasked to create New Relic deployment markers for our applications that have APM enabled. Just to give a background, I am pretty much new to New Relic and found the deployment markers pretty helpful when you want to know (and bl@me!) if someone has added a change that has compromised the performance of your application, &amp;lsquo;coz it&amp;rsquo;s all about traceability these days! Hurrah!
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>